#!/usr/bin/perl

use strict;
use warnings;

use ChemOnomatopist::Util::Graph qw(
    cyclic_components
    graph_replace
);
use Chemistry::OpenSMILES::Parser;
use Graph::Grammar;
use Graph::Writer::Dot;
use List::Util qw( sum );
use Scalar::Util qw( blessed );

sub is_C { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'C' }
sub is_H { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'H' }
sub is_N { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'N' }
sub is_O { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'O' }
sub is_S { return exists $_[1]->{symbol} && ucfirst( $_[1]->{symbol} ) eq 'S' }

sub is_C_chain { return exists $_[1]->{type} && $_[1]->{type} eq 'C_chain' }
sub is_C_chain_carboxyl { return exists $_[1]->{type} && $_[1]->{type} eq 'C_chain_carboxyl' }
sub is_carboxyl { return exists $_[1]->{type} && $_[1]->{type} eq 'carboxyl' }
sub is_headless_C_chain { return exists $_[1]->{type} && $_[1]->{type} eq 'headless_C_chain' }
sub is_hydroxy { return exists $_[1]->{type} && $_[1]->{type} eq 'hydroxy' }
sub is_ketone { return exists $_[1]->{type} && $_[1]->{type} eq 'ketone' }

sub is_NH2 { return exists $_[1]->{type} && $_[1]->{type} eq 'NH2' }
sub is_cyano { return exists $_[1]->{type} && $_[1]->{type} eq 'cyano' }

sub is_cycle { return exists $_[1]->{type} && $_[1]->{type} eq 'cycle' }
sub is_benzene { return exists $_[1]->{type} && $_[1]->{type} eq 'benzene' }

sub anything { return 1 }

my @rules = (
    # O-based groups
    [ \&is_O, \&is_H, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'hydroxy' }, @_[1..2] ) } ],
    [ \&is_O, \&anything, NO_MORE_VERTICES, { type => 'ketone' } ],
    [ \&is_O, \&is_C_chain, \&anything, NO_MORE_VERTICES, { type => 'oxyalkane' } ],

    # Rules to detect alkanes of any length
    [ \&is_C, ( \&is_H ) x 3, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => 1 }, @_[1..4] ) } ],
    [ \&is_C, ( \&is_H ) x 2, \&anything, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => 1 }, @_[1..3] ) } ], # terminal alkene
    [ \&is_C, \&is_C_chain, ( \&is_H ) x 2, sub { graph_replace( $_[0], { type => 'C_chain', length => $_[2]->{length} + 1 }, @_[1..4] ) } ],
    [ \&is_C, ( \&is_C_chain ) x 2, ( \&is_H ) x 2, NO_MORE_VERTICES, sub { graph_replace( shift @_, { type => 'C_chain', length => $_[2]->{length} + $_[3]->{length} + 1 }, @_ ) } ],
    [ \&is_C_chain, \&is_C_chain, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'C_chain', length => $_[1]->{length} + $_[2]->{length} }, @_[1..2] ) } ],
    [ \&is_C_chain, \&is_headless_C_chain, sub { graph_replace( $_[0], { type => 'C_chain', length => $_[1]->{length} + $_[2]->{length} }, @_[1..2] ) } ],

    # Handling of headless chains
    [ \&is_C, ( \&is_H ) x 2, ( \&anything ) x 2, NO_MORE_VERTICES, # Start a headless C chain
      sub { graph_replace( $_[0], { type => 'headless_C_chain', length => 1 }, @_[1..3] ) } ],
    [ \&is_headless_C_chain, \&is_headless_C_chain, # Join two headless C chains
      sub { graph_replace( $_[0], { type => 'headless_C_chain', length => $_[1]->{length} + $_[2]->{length} }, @_[1..2] ) } ],

    # Carboxyl group and chains it is attached to
    [ \&is_C, \&is_ketone, \&is_hydroxy, \&anything, NO_MORE_VERTICES, # Carboxyl group
      sub { graph_replace( $_[0], { type => 'carboxyl' }, @_[1..3] ) } ],
    [ \&is_carboxyl, \&is_headless_C_chain, NO_MORE_VERTICES,
      sub { $_[2]->{type} = 'C_chain_carboxyl'; $_[2]->{length}++; $_[0]->delete_vertex( $_[1] ) } ],
    [ \&is_carboxyl, \&is_benzene, NO_MORE_VERTICES,
      sub { $_[2]->{type} = 'benzoic acid'; $_[0]->delete_vertex( $_[1] ) } ],

    [ \&is_headless_C_chain, ( \&is_C_chain_carboxyl ) x 2, NO_MORE_VERTICES,
      sub { $_[1]->{length} = sum map { $_->{length} } @_[1..3]; $_[1]->{type} = 'C_chain_dicarboxyl'; $_[0]->delete_vertices( @_[2..3] ) } ],
    [ \&is_C_chain_carboxyl, \&is_carboxyl, NO_MORE_VERTICES,
      sub { $_[1]->{length} += 1; $_[1]->{type} = 'C_chain_dicarboxyl'; $_[0]->delete_vertices( $_[2] ) } ],

    [ \&is_C, ( \&is_N ) x 3, NO_MORE_VERTICES, # Guanidine
      sub { graph_replace( $_[0], { type => 'guanidine' }, @_[1..3] ) } ],

    [ \&is_C, \&is_benzene, \&is_ketone, \&is_N, NO_MORE_VERTICES,
      sub { graph_replace( $_[0], { type => 'benzamide' }, @_[1..4] ) } ],

    [ \&is_N, ( \&is_H ) x 3, { type => 'ammonia' } ],
    [ \&is_N, ( \&is_H ) x 2, \&anything, sub { graph_replace( $_[0], { type => 'NH2' }, @_[1..3] ) } ],

    [ \&is_C, \&is_NH2, \&is_ketone, \&anything, NO_MORE_VERTICES, { type => 'amide' } ],

    [ \&is_N, \&is_C, NO_MORE_VERTICES, { type => 'cyano' } ],
    [ \&is_NH2, \&is_NH2, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'hydrazine' }, @_[1..2] ) } ],

    [ \&is_S, \&is_H, sub { graph_replace( $_[0], { type => 'sulfanyl' }, @_[1..2] ) } ],
    [ \&is_S, \&is_ketone, ( \&anything ) x 2, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'sulfoxide' }, @_[1..2] ) } ],

    [ \&is_benzene, \&is_hydroxy, sub { graph_replace( $_[0], { type => 'phenol' }, @_[1..2] ) } ],

    [ \&is_C, \&is_cyano, \&is_cycle, NO_MORE_VERTICES, sub { graph_replace( $_[0], { type => 'carbonitrile' }, @_[1..2] ) } ],
);

while( <> ) {
    chomp;

    my $parser = Chemistry::OpenSMILES::Parser->new;
    my( $graph ) = $parser->parse( $_ );

    # Deal with cyclic components
    my @cyclic_components = cyclic_components( $graph );
    for my $cyclic_component (@cyclic_components) {
        my $cycle = {
            type => 'cycle',
            length => scalar $cyclic_component->vertices,
            atoms => join '', map { $_->{symbol} } $cyclic_component->vertices,
        };
        if( $cycle->{atoms} eq 'CCCCCC' ) {
            $cycle = { type => 'benzene' };
        }
        graph_replace( $graph, $cycle, $cyclic_component->vertices );
    }

    parse_graph( $graph, @rules );

    for my $vertex ($graph->vertices) {
        $graph->set_vertex_attribute( $vertex, 'label', exists $vertex->{symbol} ? $vertex->{symbol} : $vertex->{type} );
    }

    my $writer = Graph::Writer::Dot->new;
    $writer->write_graph( $graph, '/dev/stdout' );
}
